The goal of a red black tree is to maintain a balanced binary search tree. This is achieved by adding a "color" to every node and declaring a series of constraints around these colors. The constraints are used to identify when and how the tree needs to be balanced. Balance is achieved by recoloring and rotating parts of the tree.

The two key constraints that maintain balance are every red node must only have black children and every path from the root to a leaf must have the same number of black nodes. This means that the tree will not be perfectly balanced. The longest branch would be one of alternating black and red nodes while the shortest branch would only contain black nodes. This creates a guarantee that the longest branch will be twice as long as the shortest which is usually acceptable. The search, insertion, and deletion asymptotic time complexities are all O(log N).

When inserting a node, the tree needs to be balanced if the parent of the inserted node is red. This would violate the property of a red node only having black children and force the inserted node to be colored black. This in turn would create an extra black node on that branch that would violate the property that any path from the root to a leaf must contain the same number of black nodes. How the tree will be balanced is determined by the color of the inserted node's uncle. If the uncle is red we can simply color it black without fear of violating any of our constraints. If the uncle is black, a rotation is needed to maintain balance.

When deleting a node, the tree needs to be balanced if the node deleted is black. This creates one less black node on the current branch and will violate the property that any any path from the root to a leaf must contain the same number of black nodes. How the tree will be balanced is determined by the deleted node's parent and sibling.